import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import ttest_ind, normaltest, mannwhitneyu
sns.set_theme(style="darkgrid")

st.write("""
# –ú–¢–µ—Ö 

–î–∞–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –≥–∏–ø–æ—Ç–µ–∑—ã –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö: 
         
1. –ú—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ–±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω
         
2. –†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å—Ç–∞—Ä—à–µ 35 –ª–µ—Ç (age) –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö
–¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ —Å–≤–æ–∏—Ö –±–æ–ª–µ–µ –º–æ–ª–æ–¥—ã—Ö –∫–æ–ª–ª–µ–≥
""")
st.write('---')

st.title('–ö–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ: ')

st.write('–ù–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ csv, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç: ')

table_md = """
| id | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π | –í–æ–∑—Ä–∞—Å—Ç | –ü–æ–ª |
| --- | --- | --- | --- |
| int | int | int | '–ñ' / '–ú' |

"""

st.markdown(table_md)

st.write(' ')
st.write('–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∫–æ–ª-–≤–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π  - –ø—Ä–∏ –ø–æ–º–æ—â–∏ –ø–æ–ª–∑—É–Ω–∫–∞ —Å–ª–µ–≤–∞. –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–∏–ø–æ—Ç–µ–∑. ')

st.write('–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑, –ø—Ä–æ–ª–∏—Å—Ç–∞–≤ –≤–Ω–∏–∑.')





st.title("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à csv —Ñ–∞–π–ª.")

df = pd.read_csv('–ú.–¢–µ—Ö_–î–∞–Ω–Ω—ã–µ_–∫_–¢–ó_DS.csv', sep='\,', engine='python', header=None, encoding='cp1251').apply(lambda x: x.str.replace(r"\"","", regex=True))
rename_columns = {0: df[0][0], 1: df[1][0], 2: df[2][0]}
df.rename(rename_columns, axis=1, inplace=True)
df.drop(0, axis=0, inplace=True)
df = df.astype({'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π': 'int32', '–í–æ–∑—Ä–∞—Å—Ç': 'int32'})
st.write(df)

uploaded_file = st.file_uploader("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª")
if uploaded_file is not None:
    df = pd.read_csv(uploaded_file, sep='\,', engine='python', header=None, encoding='cp1251').apply(lambda x: x.str.replace(r"\"","", regex=True))
    rename_columns = {0: df[0][0], 1: df[1][0], 2: df[2][0]}
    df.rename(rename_columns, axis=1, inplace=True)
    df.drop(0, axis=0, inplace=True)
    df = df.astype({'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π': 'int32', '–í–æ–∑—Ä–∞—Å—Ç': 'int32'})
    st.write(df)

st.title("–ì–∏–ø–æ—Ç–µ–∑–∞ 1.")

st.write('–ú—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.')

fig1 = plt.figure(figsize=(9, 5))
sns.histplot(data=df, x="–ü–æ–ª")
plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É–∂—á–∏–Ω –∏ –∂–µ–Ω—â–∏–Ω –≤ –Ω–∞—à–µ–º –¥–∞—Ç–∞—Å–µ—Ç–µ')
st.pyplot(fig1)

fig2 = plt.figure(figsize=(9, 5))
sns.countplot(data=df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π", hue="–ü–æ–ª")
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ–∂–¥—É –ø–æ–ª–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ –±–æ–ª–µ–∑–Ω–∏ –¥–Ω–µ–π')
st.pyplot(fig2)

fig3 = plt.figure(figsize=(9, 5))
sns.histplot(data=df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π", hue="–ü–æ–ª", element="poly", kde=True)
st.pyplot(fig3)

class mean_test_between_men_and_women:

    def __init__(self, df, alpha=0.05, work_days=2):
        # :df: input [DataFrame] 
        # :alpha: statistical significance level [int]
        # :work_days: number of missed working days we want to explore [int]
        self.df = df
        self.alpha = alpha
        self.work_days = work_days

    def df_cutting(self):

        #–Ω–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π > work_days
        df_cut = self.df[self.df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'] > self.work_days]

        #—Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º
        men = df_cut[df_cut['–ü–æ–ª'] == '–ú']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values
        women = df_cut[df_cut['–ü–æ–ª'] == '–ñ']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values

        return men, women

    def t_test(self, men, women):
        #t-test, –º—ã –º–æ–∂–µ–º —Å—á–∏—Ç–∞—Ç—å –Ω–∞—à–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º ttest_ind –∏–∑ scipy –±–∏–±–ª–æ—Ç–µ–∫–∏ 
        stat, p = ttest_ind(men, women, alternative='greater') #alternative='greater' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã ùúá_men > ùúá_women
        if p <= self.alpha: 
            st.markdown(f'T-test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_women ‚â• ùúá_men –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è, —Ç.–∫. p-value –¥–ª—è t-test {round(p, 3)} < {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –º—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.\n')
            return ' '
        else: 
            st.markdown(f'T-test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_women ‚â• ùúá_men –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞, —Ç.–∫. p-value –¥–ª—è t-test {round(p, 3)} > {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –æ—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –º—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.\n')
            return ' '

    def mannwhitneyu_test(self, men, women):
        #Mann-Whitney U test:
        stat, p = mannwhitneyu(men, women, alternative='greater') #alternative='greater' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã ùúá_men > ùúá_women
        if p <= self.alpha: 
            st.markdown(f'Mann-Whitney U test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_women ‚â• ùúá_men –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è, —Ç.–∫. p-value –¥–ª—è Mann-Whitney U test {round(p, 3)} < {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –º—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.\n')
            return ' '
        else: 
            st.markdown(f'Mann-Whitney U test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_women ‚â• ùúá_men –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞, —Ç.–∫. p-value –¥–ª—è Mann-Whitney U test {round(p, 3)} > {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –æ—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –º—É–∂—á–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –∂–µ–Ω—â–∏–Ω.\n')
            return ' '

    def test(self):  
         #—Ç–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
         men, women = self.df_cutting()
         if len(men) < 8 or len(women) < 8: 
            st.markdown('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç—ã, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ –º–∞–ª—ã: n<8, –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç –∏–ª–∏ –∂–µ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä work_days.')
            return 
         
         stat_norm_men, p_norm_men = normaltest(men)
         stat_norm_women, p_norm_women = normaltest(women)
         #—Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞—à–∏—Ö –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫, –≤ —Å–ª—É—á–∞–µ –±–æ–ª—å—à–∏—Ö –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫ - –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å t-test
         if (p_norm_men <= self.alpha or p_norm_women <= self.alpha) and (len(men) < 40 or len(women) < 40):
             st.markdown(f'–ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ t-test —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∂–µ —É –Ω–∞—Å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: \n–¥–ª—è –º—É–∂—á–∏–Ω p-value = {round(p_norm_men, 3)} \n–¥–ª—è –∂–µ–Ω—â–∏–Ω p-value = {round(p_norm_women, 3)} \n–Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ alpha = {self.alpha}.')
             st.markdown('\n–ù–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ú–∞–Ω–Ω–∞ ‚Äî –£–∏—Ç–Ω–∏:')
             self.mannwhitneyu_test(men, women)
         else: 
             self.t_test(men, women), self.mannwhitneyu_test(men, women)

         return 


def user_input_features():
    age = st.sidebar.slider('–í–æ–∑—Ä–∞—Å—Ç', df['–í–æ–∑—Ä–∞—Å—Ç'].min(), df['–í–æ–∑—Ä–∞—Å—Ç'].max(), int(df['–í–æ–∑—Ä–∞—Å—Ç'].mean()), step=1)
    work_days = st.sidebar.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π', df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].min(), df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].max(), int(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].mean()), step=1)
    alpha = st.sidebar.slider('–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ ùõº', 0.01, 0.1, 0.05)

    return age, work_days, alpha


age, work_days, alpha = user_input_features()

st.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã 1.")

testing1 = mean_test_between_men_and_women(df, alpha, work_days)
testing1.test()

st.write('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É—Ç—Å—Ç—Ä–µ–ø–∞:')


class bootstrap_for_men_and_women():

    def __init__(self, df, alpha=0.05, k=10000):
        # :df: input [DataFrame] 
        # :k: number of subsamples [int]
        # :alpha: statistical significance level [int]
        self.df = df
        self.k = k
        self.alpha = alpha

    def men_and_women(self):
        #—Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º
        men = self.df[self.df['–ü–æ–ª'] == '–ú']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values
        women = self.df[self.df['–ü–æ–ª'] == '–ñ']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values

        return men, women

    def sampling(self, data): 
        #–≥–µ–Ω–µ—Ä–∏–º –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –±—É—Ç—Å—Ç—Ä–µ–ø–∞
        index = np.random.randint(0, len(data), (self.k, len(data)))
        samples = data[index]

        return samples

    def conf_intervals(self, mean):
        # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        # :mean: list of mean values for our subsamples [list]
        boundaries = np.percentile(mean, [100 * self.alpha / 2., 100 * (1 - self.alpha / 2.)])

        return boundaries
    
    def generation(self): 
        men, women = self.men_and_women()
        men_means = [np.mean(sample) for sample in self.sampling(men)]
        women_means = [np.mean(sample) for sample in self.sampling(women)]

        return men_means, women_means

    def intervals(self): 
        men_means, women_means = self.generation()
        conf_int_men = self.conf_intervals(men_means)
        conf_int_women = self.conf_intervals(women_means)
        st.markdown(f'–° {int(100*(1-self.alpha))}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –º—É–∂—á–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {round(conf_int_men[0], 2)} –¥–æ {round(conf_int_men[1], 2)}.')
        st.markdown(f'–° {int(100*(1-self.alpha))}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∂–µ–Ω—â–∏–Ω–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {round(conf_int_women[0], 2)} –¥–æ {round(conf_int_women[1], 2)}.   ')


bootstrap1 = bootstrap_for_men_and_women(df, alpha)
bootstrap1.intervals()

st.title("–ì–∏–ø–æ—Ç–µ–∑–∞ 2.")

st.write('–†–∞–±–æ—Ç–Ω–∏–∫–∏ —Å—Ç–∞—Ä—à–µ 35 –ª–µ—Ç (age) –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ —Å–≤–æ–∏—Ö –±–æ–ª–µ–µ –º–æ–ª–æ–¥—ã—Ö –∫–æ–ª–ª–µ–≥.')

fig4 = plt.figure(figsize=(9, 5))
df['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'] = df['–í–æ–∑—Ä–∞—Å—Ç']
df['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'] = df['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'].map(lambda x: '–î–æ 35' if x < 35 else '–°—Ç–∞—Ä—à–µ 35')
sns.histplot(data=df, x="–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞")
plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –¥–æ 35 –∏ —Å—Ç–∞—Ä—à–µ')
st.pyplot(fig4)

fig5 = plt.figure(figsize=(9, 5))
sns.countplot(data=df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π", hue="–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞")
plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ –±–æ–ª–µ–∑–Ω–∏ –¥–Ω–µ–π —Ä–∞–±–æ—Ç–Ω–∏–∫–∞–º–∏ –¥–æ 35 –∏ —Å—Ç–∞—Ä—à–µ')
st.pyplot(fig5)

fig6 = plt.figure(figsize=(9, 5))
sns.histplot(data=df, x="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π", hue="–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞", element="poly", kde=True)
st.pyplot(fig6)

class mean_test_between_young_and_aged:

    def __init__(self, df, alpha=0.05, work_days=2):
        # :df: input [DataFrame] 
        # :alpha: statistical significance level [int]
        # :work_days: number of missed working days we want to explore [int]
        self.df = df
        self.alpha = alpha
        self.work_days = work_days

    def df_cutting(self):

        #–Ω–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —á–∏—Å–ª–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π > work_days
        df_cut = self.df[self.df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'] > self.work_days]

        #—Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ —Å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–º–∏ –¥–Ω—è–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º
        aged = df_cut[df_cut['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'] == '–î–æ 35']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values
        young = df_cut[df_cut['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'] == '–°—Ç–∞—Ä—à–µ 35']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values

        return aged, young

    def t_test(self, aged, young):
        #t-test, –º—ã –º–æ–∂–µ–º —Å—á–∏—Ç–∞—Ç—å –Ω–∞—à–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º–∏, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º ttest_ind –∏–∑ scipy –±–∏–±–ª–æ—Ç–µ–∫–∏ 
        stat, p = ttest_ind(aged, young, alternative='greater') #alternative='greater' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã ùúá_aged > ùúá_young
        if p <= self.alpha: 
            st.markdown(f'T-test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_young ‚â• ùúá_aged –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è, —Ç.–∫. p-value –¥–ª—è t-test {round(p, 3)} < {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –≤–∑—Ä–æ—Å–ª—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –º–æ–ª–æ–¥—ã—Ö.\n')
        else: 
            st.markdown(f'T-test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_young ‚â• ùúá_aged –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞, —Ç.–∫. p-value –¥–ª—è t-test {round(p, 3)} > {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –æ—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –≤–∑—Ä–æ—Å–ª—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –º–æ–ª–æ–¥—ã—Ö.\n')

    def mannwhitneyu_test(self, aged, young):
        #Mann-Whitney U test:
        stat, p = mannwhitneyu(aged, young, alternative='greater') #alternative='greater' –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–≥–ª–∞—Å–Ω–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –≥–∏–ø–æ—Ç–µ–∑—ã ùúá_aged > ùúá_young
        if p <= self.alpha: 
            st.markdown(f'Mann-Whitney U test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_young ‚â• ùúá_aged –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç—Å—è, —Ç.–∫. p-value –¥–ª—è Mann-Whitney U test {round(p, 3)} < {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –≤–∑—Ä–æ—Å–ª—ã–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –º–æ–ª–æ–¥—ã—Ö.\n')
        else: 
            st.markdown(f'Mann-Whitney U test: –ù—É–ª–µ–≤–∞—è –≥–∏–ø–æ—Ç–µ–∑–∞ –æ —Ç–æ–º, —á—Ç–æ ùúá_young ‚â• ùúá_aged –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–≤–µ—Ä–≥–Ω—É—Ç–∞, —Ç.–∫. p-value –¥–ª—è Mann-Whitney U test {round(p, 3)} > {self.alpha} - —É—Ä–æ–≤–Ω—è –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏.')
            st.markdown('\n–ú—ã –æ—Ç–≤–µ—Ä–≥–∞–µ–º –≥–∏–ø–æ—Ç–µ–∑—É –æ —Ç–æ–º, —á—Ç–æ –≤–∑—Ä–æ—Å—ã–ª–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –≥–æ–¥–∞ –±–æ–ª–µ–µ 2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π (work_days) –ø–æ –±–æ–ª–µ–∑–Ω–∏ –∑–Ω–∞—á–∏–º–æ —á–∞—â–µ –º–æ–ª–æ–¥—ã—Ö.\n')

    def test(self):  
         #—Ç–µ—Å—Ç –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å
         aged, young = self.df_cutting()
         if len(aged) < 8 or len(young) < 8: 
            st.markdown('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ—Å—Ç—ã, —Ç–∞–∫ –∫–∞–∫ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏ –º–∞–ª—ã: n<8, –¥–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–∞—Ç–∞—Å–µ—Ç –∏–ª–∏ –∂–µ —É–º–µ–Ω—å—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä work_days.')
            return
         stat_norm_aged, p_norm_aged = normaltest(aged)
         stat_norm_young, p_norm_young = normaltest(young)
         #—Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞—à–∏—Ö –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫, –≤ —Å–ª—É—á–∞–µ –±–æ–ª—å—à–∏—Ö –ø–æ–¥–≤—ã–±–æ—Ä–æ–∫ - –º—ã –º–æ–∂–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å t-test
         if (p_norm_aged <= self.alpha or p_norm_young <= self.alpha) and (len(aged) < 40 or len(young) < 40):
             st.markdown(f'–ú—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ t-test —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –≥–∏–ø–æ—Ç–µ–∑—É –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∂–µ —É –Ω–∞—Å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∞—Ç–∞—Å–µ—Ç, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å: \n–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ p-value = {round(p_norm_aged, 3)} \n–¥–ª—è –º–æ–ª–æ–¥—ã—Ö —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ p-value = {round(p_norm_young, 3)} \n–Ω–∞ —É—Ä–æ–≤–Ω–µ –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏ alpha = {self.alpha}.')
             st.markdown('\n–ù–æ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–µ–ø–∞—Ä–∞–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –ú–∞–Ω–Ω–∞ ‚Äî –£–∏—Ç–Ω–∏:')
             self.mannwhitneyu_test(aged, young)
         else: 
             self.t_test(aged, young), self.mannwhitneyu_test(aged, young)
         return 

st.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã 2.")

testing2 = mean_test_between_young_and_aged(df, alpha, work_days)
testing2.test()


st.write('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É—Ç—Å—Ç—Ä–µ–ø–∞:')

class bootstrap_for_young_and_aged():

    def __init__(self, df, alpha=0.05, k=10000):
        # :df: input [DataFrame] 
        # :k: number of subsamples [int]
        # :alpha: statistical significance level [int]
        self.df = df
        self.k = k
        self.alpha = alpha

    def aged_and_young(self):
        #—Å–æ–∑–¥–∞–¥–∏–º –¥–≤–µ –ø–æ–¥–≤—ã–±–æ—Ä–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º—É–∂—á–∏–Ω–∞–º –∏ –∂–µ–Ω—â–∏–Ω–∞–º
        aged = df[df['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'] == '–î–æ 35']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values
        young = df[df['–†–∞–Ω–∂–∏—Ä–æ–≤–∫–∞'] == '–°—Ç–∞—Ä—à–µ 35']['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö –¥–Ω–µ–π'].values

        return aged, young

    def sampling(self, data): 
        #–≥–µ–Ω–µ—Ä–∏–º –≤—ã–±–æ—Ä–∫–∏ –¥–ª—è –±—É—Ç—Å—Ç—Ä–µ–ø–∞
        index = np.random.randint(0, len(data), (self.k, len(data)))
        samples = data[index]

        return samples

    def conf_intervals(self, mean):
        # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        # :mean: list of mean values for our subsamples [list]
        boundaries = np.percentile(mean, [100 * self.alpha / 2., 100 * (1 - self.alpha / 2.)])

        return boundaries
    
    def generation(self): 
        aged, young = self.aged_and_young()
        aged_means = [np.mean(sample) for sample in self.sampling(aged)]
        young_means = [np.mean(sample) for sample in self.sampling(young)]

        return aged_means, young_means

    def intervals(self): 
        aged_means, young_means = self.generation()
        conf_int_aged = self.conf_intervals(aged_means)
        conf_int_young = self.conf_intervals(young_means)
        st.markdown(f'–° {int(100*(1-self.alpha))}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –≤–∑—Ä–æ—Å–ª—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {round(conf_int_aged[0], 2)} –¥–æ {round(conf_int_aged[1], 2)}.')
        st.markdown(f'–° {int(100*(1-self.alpha))}% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –º–æ–ª–æ–¥–æ–π —Ä–∞–±–æ—Ç–Ω–∏–∫ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∫–æ–ª-–≤–æ —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {round(conf_int_young[0], 2)} –¥–æ {round(conf_int_young[1], 2)}.')


bootstrap2 = bootstrap_for_young_and_aged(df, alpha)
bootstrap2.intervals()


